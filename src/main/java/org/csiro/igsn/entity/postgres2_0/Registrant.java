package org.csiro.igsn.entity.postgres2_0;

// Generated 27/10/2015 10:58:13 AM by Hibernate Tools 4.3.1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

/**
 * Registrant generated by hbm2java
 */
@Entity
@Table(name = "registrant", uniqueConstraints = @UniqueConstraint(columnNames = "username"))
@NamedQueries({
	@NamedQuery(
			name="Registrant.searchByUsername",
		    query="SELECT r FROM Registrant r where r.username = :username"
	)
})	
public class Registrant implements java.io.Serializable {

	private int registrantid;
	private Allocator allocator;
	private String registrantname;
	private String registrantemail;
	private Date created;
	private String username;
	private String password;
	private Date updated;
	private Boolean isactive;
	private Set<Prefix> prefixes = new HashSet<Prefix>(0);
	private Sample sample;

	public Registrant() {
	}

	public Registrant(Allocator allocator,
			String registrantname, String registrantemail, String username,
			String password) {		
		this.allocator = allocator;
		this.registrantname = registrantname;
		this.registrantemail = registrantemail;
		this.username = username;
		this.password = password;
	}

	public Registrant(Allocator allocator,
			String registrantname, String registrantemail, Date created,
			String username, String password, Date updated, Boolean isactive,
			Set<Prefix> prefixes, Sample sample) {
		
		this.allocator = allocator;
		this.registrantname = registrantname;
		this.registrantemail = registrantemail;
		this.created = created;
		this.username = username;
		this.password = password;
		this.updated = updated;
		this.isactive = isactive;
		this.prefixes = prefixes;
		this.sample = sample;
	}

	@Id
	@Column(name = "registrantid", unique = true, nullable = false)
	@SequenceGenerator(name="registrant_registrantid_seq",sequenceName="registrant_registrantid_seq", allocationSize=1)
	@GeneratedValue(strategy=GenerationType.SEQUENCE,generator="registrant_registrantid_seq")
	public int getRegistrantid() {
		return this.registrantid;
	}

	public void setRegistrantid(int registrantid) {
		this.registrantid = registrantid;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "allocator", nullable = false)
	public Allocator getAllocator() {
		return this.allocator;
	}

	public void setAllocator(Allocator allocator) {
		this.allocator = allocator;
	}

	@Column(name = "registrantname", nullable = false)
	public String getRegistrantname() {
		return this.registrantname;
	}

	public void setRegistrantname(String registrantname) {
		this.registrantname = registrantname;
	}

	@Column(name = "registrantemail", nullable = false)
	public String getRegistrantemail() {
		return this.registrantemail;
	}

	public void setRegistrantemail(String registrantemail) {
		this.registrantemail = registrantemail;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created", length = 29)
	public Date getCreated() {
		return this.created;
	}

	public void setCreated(Date created) {
		this.created = created;
	}

	@Column(name = "username", unique = true, nullable = false, length = 50)
	public String getUsername() {
		return this.username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	@Column(name = "password", nullable = false, length = 50)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "updated", length = 29)
	public Date getUpdated() {
		return this.updated;
	}

	public void setUpdated(Date updated) {
		this.updated = updated;
	}

	@Column(name = "isactive")
	public Boolean getIsactive() {
		return this.isactive;
	}

	public void setIsactive(Boolean isactive) {
		this.isactive = isactive;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "registrant_prefixes", joinColumns = { @JoinColumn(name = "registrant", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "prefixes", nullable = false, updatable = false) })
	public Set<Prefix> getPrefixes() {
		return this.prefixes;
	}

	public void setPrefixes(Set<Prefix> prefixes) {
		this.prefixes = prefixes;
	}

	@OneToOne(fetch = FetchType.LAZY, mappedBy = "registrant")
	public Sample getSample() {
		return this.sample;
	}

	public void setSample(Sample sample) {
		this.sample = sample;
	}

}
