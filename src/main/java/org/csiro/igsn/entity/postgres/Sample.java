package org.csiro.igsn.entity.postgres;

// Generated 04/08/2015 2:17:37 PM by Hibernate Tools 4.3.1

import java.io.Serializable;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.Type;

import com.vividsolutions.jts.geom.Point;

/**
 * Sample generated by hbm2java
 */
@Entity
@Table(name = "sample")
public class Sample implements java.io.Serializable {

	private int sampleId;
	private CvClassification cvClassification;
	private CvSampletype cvSampletype;
	private CvSamplingfeature cvSamplingfeature;
	private CvSamplingmethod cvSamplingmethod;
	private CvSpatialreferences cvSpatialreferencesByLatLongDatumId;
	private CvSpatialreferences cvSpatialreferencesByLocalProjectionId;
	private CvUnits cvUnitsBySampleSizeUnit;
	private CvUnits cvUnitsByElevationUnit;
	private Registrant registrant;
	private String sampleName;
	private String otherName;
	private String igsn;
	private String purpose;
	private boolean isPublic;
	private String comment;
	private Date samplingStart;
	private Date samplingEnd;
	private Point latLon;
	private Double elevation;
	private Point localxy;
	private Point latlonEnd;
	private String locality;
	private Double sampleSize;
	private String samplingCampaign;
	private Date created;
	private Date modified;
	private String modifiedBy;
	private Set<Samplecollector> samplecollectors = new HashSet<Samplecollector>(
			0);
	private Set<Samplegroup> samplegroups = new HashSet<Samplegroup>(0);
	private Set<Samplecuration> samplecurations = new HashSet<Samplecuration>(0);
	private Set<Sampleresources> sampleresourceses = new HashSet<Sampleresources>(
			0);
	private Set<SampleFeaturesMapping> sampleFeaturesMappings = new HashSet<SampleFeaturesMapping>(
			0);

	public Sample() {
	}

	public Sample(int sampleId, CvSampletype cvSampletype,
			Registrant registrant, String sampleName, boolean isPublic) {
		this.sampleId = sampleId;
		this.cvSampletype = cvSampletype;
		this.registrant = registrant;
		this.sampleName = sampleName;
		this.isPublic = isPublic;
	}

	public Sample(int sampleId, CvClassification cvClassification,
			CvSampletype cvSampletype, CvSamplingfeature cvSamplingfeature,
			CvSamplingmethod cvSamplingmethod,
			CvSpatialreferences cvSpatialreferencesByLatLongDatumId,
			CvSpatialreferences cvSpatialreferencesByLocalProjectionId,
			CvUnits cvUnitsBySampleSizeUnit, CvUnits cvUnitsByElevationUnit,
			Registrant registrant, String sampleName, String otherName,
			String igsn, String purpose, boolean isPublic, String comment,
			Date samplingStart, Date samplingEnd, Point latLon,
			Double elevation, Point localxy, Point latlonEnd,
			String locality, Double sampleSize, String samplingCampaign,
			Date created, Date modified, String modifiedBy,
			Set<Samplecollector> samplecollectors,
			Set<Samplegroup> samplegroups, Set<Samplecuration> samplecurations,
			Set<Sampleresources> sampleresourceses,
			Set<SampleFeaturesMapping> sampleFeaturesMappings) {
		this.sampleId = sampleId;
		this.cvClassification = cvClassification;
		this.cvSampletype = cvSampletype;
		this.cvSamplingfeature = cvSamplingfeature;
		this.cvSamplingmethod = cvSamplingmethod;
		this.cvSpatialreferencesByLatLongDatumId = cvSpatialreferencesByLatLongDatumId;
		this.cvSpatialreferencesByLocalProjectionId = cvSpatialreferencesByLocalProjectionId;
		this.cvUnitsBySampleSizeUnit = cvUnitsBySampleSizeUnit;
		this.cvUnitsByElevationUnit = cvUnitsByElevationUnit;
		this.registrant = registrant;
		this.sampleName = sampleName;
		this.otherName = otherName;
		this.igsn = igsn;
		this.purpose = purpose;
		this.isPublic = isPublic;
		this.comment = comment;
		this.samplingStart = samplingStart;
		this.samplingEnd = samplingEnd;
		this.latLon = latLon;
		this.elevation = elevation;
		this.localxy = localxy;
		this.latlonEnd = latlonEnd;
		this.locality = locality;
		this.sampleSize = sampleSize;
		this.samplingCampaign = samplingCampaign;
		this.created = created;
		this.modified = modified;
		this.modifiedBy = modifiedBy;
		this.samplecollectors = samplecollectors;
		this.samplegroups = samplegroups;
		this.samplecurations = samplecurations;
		this.sampleresourceses = sampleresourceses;
		this.sampleFeaturesMappings = sampleFeaturesMappings;
	}

	@Id
	@Column(name = "sample_id", unique = true, nullable = false)
	@SequenceGenerator(name="sample_sample_id_seq",sequenceName="sample_sample_id_seq", allocationSize=1)
	@GeneratedValue(strategy=GenerationType.SEQUENCE,generator="sample_sample_id_seq")
	public int getSampleId() {
		return this.sampleId;
	}

	public void setSampleId(int sampleId) {
		this.sampleId = sampleId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "classification")
	public CvClassification getCvClassification() {
		return this.cvClassification;
	}

	public void setCvClassification(CvClassification cvClassification) {
		this.cvClassification = cvClassification;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "sample_type", nullable = false)
	public CvSampletype getCvSampletype() {
		return this.cvSampletype;
	}

	public void setCvSampletype(CvSampletype cvSampletype) {
		this.cvSampletype = cvSampletype;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "sampling_feature_id")
	public CvSamplingfeature getCvSamplingfeature() {
		return this.cvSamplingfeature;
	}

	public void setCvSamplingfeature(CvSamplingfeature cvSamplingfeature) {
		this.cvSamplingfeature = cvSamplingfeature;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "sampling_method")
	public CvSamplingmethod getCvSamplingmethod() {
		return this.cvSamplingmethod;
	}

	public void setCvSamplingmethod(CvSamplingmethod cvSamplingmethod) {
		this.cvSamplingmethod = cvSamplingmethod;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "lat_long_datum_id")
	public CvSpatialreferences getCvSpatialreferencesByLatLongDatumId() {
		return this.cvSpatialreferencesByLatLongDatumId;
	}

	public void setCvSpatialreferencesByLatLongDatumId(
			CvSpatialreferences cvSpatialreferencesByLatLongDatumId) {
		this.cvSpatialreferencesByLatLongDatumId = cvSpatialreferencesByLatLongDatumId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "local_projection_id")
	public CvSpatialreferences getCvSpatialreferencesByLocalProjectionId() {
		return this.cvSpatialreferencesByLocalProjectionId;
	}

	public void setCvSpatialreferencesByLocalProjectionId(
			CvSpatialreferences cvSpatialreferencesByLocalProjectionId) {
		this.cvSpatialreferencesByLocalProjectionId = cvSpatialreferencesByLocalProjectionId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "sample_size_unit")
	public CvUnits getCvUnitsBySampleSizeUnit() {
		return this.cvUnitsBySampleSizeUnit;
	}

	public void setCvUnitsBySampleSizeUnit(CvUnits cvUnitsBySampleSizeUnit) {
		this.cvUnitsBySampleSizeUnit = cvUnitsBySampleSizeUnit;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "elevation_unit")
	public CvUnits getCvUnitsByElevationUnit() {
		return this.cvUnitsByElevationUnit;
	}

	public void setCvUnitsByElevationUnit(CvUnits cvUnitsByElevationUnit) {
		this.cvUnitsByElevationUnit = cvUnitsByElevationUnit;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "registrant", nullable = false)
	public Registrant getRegistrant() {
		return this.registrant;
	}

	public void setRegistrant(Registrant registrant) {
		this.registrant = registrant;
	}

	@Column(name = "sample_name", nullable = false)
	public String getSampleName() {
		return this.sampleName;
	}

	public void setSampleName(String sampleName) {
		this.sampleName = sampleName;
	}

	@Column(name = "other_name")
	public String getOtherName() {
		return this.otherName;
	}

	public void setOtherName(String otherName) {
		this.otherName = otherName;
	}

	@Column(name = "igsn")
	public String getIgsn() {
		return this.igsn;
	}

	public void setIgsn(String igsn) {
		this.igsn = igsn;
	}

	@Column(name = "purpose")
	public String getPurpose() {
		return this.purpose;
	}

	public void setPurpose(String purpose) {
		this.purpose = purpose;
	}

	@Column(name = "is_public", nullable = false)
	public boolean isIsPublic() {
		return this.isPublic;
	}

	public void setIsPublic(boolean isPublic) {
		this.isPublic = isPublic;
	}

	@Column(name = "comment")
	public String getComment() {
		return this.comment;
	}

	public void setComment(String comment) {
		this.comment = comment;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "sampling_start", length = 29)
	public Date getSamplingStart() {
		return this.samplingStart;
	}

	public void setSamplingStart(Date samplingStart) {
		this.samplingStart = samplingStart;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "sampling_end", length = 29)
	public Date getSamplingEnd() {
		return this.samplingEnd;
	}

	public void setSamplingEnd(Date samplingEnd) {
		this.samplingEnd = samplingEnd;
	}

	@Column(name = "lat_lon")
	@Type(type="org.hibernate.spatial.GeometryType")
	public Point getLatLon() {
		return this.latLon;
	}

	public void setLatLon(Point latLon) {
		this.latLon = latLon;
	}

	@Column(name = "elevation", precision = 17, scale = 17)
	public Double getElevation() {
		return this.elevation;
	}

	public void setElevation(Double elevation) {
		this.elevation = elevation;
	}

	@Column(name = "localxy")
	@Type(type="org.hibernate.spatial.GeometryType")
	public Point getLocalxy() {
		return this.localxy;
	}

	public void setLocalxy(Point localxy) {
		this.localxy = localxy;
	}

	@Column(name = "latlon_end")
	@Type(type="org.hibernate.spatial.GeometryType")
	public Point getLatlonEnd() {
		return this.latlonEnd;
	}

	public void setLatlonEnd(Point latlonEnd) {
		this.latlonEnd = latlonEnd;
	}

	@Column(name = "locality", length = 200)
	public String getLocality() {
		return this.locality;
	}

	public void setLocality(String locality) {
		this.locality = locality;
	}

	@Column(name = "sample_size", precision = 17, scale = 17)
	public Double getSampleSize() {
		return this.sampleSize;
	}

	public void setSampleSize(Double sampleSize) {
		this.sampleSize = sampleSize;
	}

	@Column(name = "sampling_campaign")
	public String getSamplingCampaign() {
		return this.samplingCampaign;
	}

	public void setSamplingCampaign(String samplingCampaign) {
		this.samplingCampaign = samplingCampaign;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created", length = 29)
	public Date getCreated() {
		return this.created;
	}

	public void setCreated(Date created) {
		this.created = created;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "modified", length = 29)
	public Date getModified() {
		return this.modified;
	}

	public void setModified(Date modified) {
		this.modified = modified;
	}

	@Column(name = "modified_by", length = 80)
	public String getModifiedBy() {
		return this.modifiedBy;
	}

	public void setModifiedBy(String modifiedBy) {
		this.modifiedBy = modifiedBy;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "sample")
	public Set<Samplecollector> getSamplecollectors() {
		return this.samplecollectors;
	}

	public void setSamplecollectors(Set<Samplecollector> samplecollectors) {
		this.samplecollectors = samplecollectors;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "sample")
	public Set<Samplegroup> getSamplegroups() {
		return this.samplegroups;
	}

	public void setSamplegroups(Set<Samplegroup> samplegroups) {
		this.samplegroups = samplegroups;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "sample")
	public Set<Samplecuration> getSamplecurations() {
		return this.samplecurations;
	}

	public void setSamplecurations(Set<Samplecuration> samplecurations) {
		this.samplecurations = samplecurations;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "sample")
	public Set<Sampleresources> getSampleresourceses() {
		return this.sampleresourceses;
	}

	public void setSampleresourceses(Set<Sampleresources> sampleresourceses) {
		this.sampleresourceses = sampleresourceses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "sample")
	public Set<SampleFeaturesMapping> getSampleFeaturesMappings() {
		return this.sampleFeaturesMappings;
	}

	public void setSampleFeaturesMappings(
			Set<SampleFeaturesMapping> sampleFeaturesMappings) {
		this.sampleFeaturesMappings = sampleFeaturesMappings;
	}

}
