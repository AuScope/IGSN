package org.csiro.igsn.entity.postgres;

// Generated 04/08/2015 2:17:37 PM by Hibernate Tools 4.3.1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Persistence;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Allocator generated by hbm2java
 */
@Entity
@Table(name = "allocator")
public class Allocator implements java.io.Serializable {

	private int allocatorId;
	private Prefix prefix;
	private String comments;
	private String contactEmail;
	private String contactName;
	private Date created;
	private Boolean isActive;
	private String username;
	private String password;
	private Set<Registrant> registrants = new HashSet<Registrant>(0);

	public Allocator() {
	}

	public Allocator(int allocatorId, Prefix prefix, String contactEmail,
			String contactName, String username, String password) {
		this.allocatorId = allocatorId;
		this.prefix = prefix;
		this.contactEmail = contactEmail;
		this.contactName = contactName;
		this.username = username;
		this.password = password;
	}

	public Allocator(int allocatorId, Prefix prefix, String comments,
			String contactEmail, String contactName, Date created,
			Boolean isActive, String username, String password,
			Set<Registrant> registrants) {
		this.allocatorId = allocatorId;
		this.prefix = prefix;
		this.comments = comments;
		this.contactEmail = contactEmail;
		this.contactName = contactName;
		this.created = created;
		this.isActive = isActive;
		this.username = username;
		this.password = password;
		this.registrants = registrants;
	}

	@Id
	@Column(name = "allocator_id", unique = true, nullable = false)
	@SequenceGenerator(name="allocator_allocator_id_seq",sequenceName="allocator_allocator_id_seq", allocationSize=1)
	@GeneratedValue(strategy=GenerationType.SEQUENCE,generator="allocator_allocator_id_seq")
	public int getAllocatorId() {
		return this.allocatorId;
	}

	public void setAllocatorId(int allocatorId) {
		this.allocatorId = allocatorId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "allocator_prefix", nullable = false)
	public Prefix getPrefix() {
		return this.prefix;
	}

	public void setPrefix(Prefix prefix) {
		this.prefix = prefix;
	}

	@Column(name = "comments")
	public String getComments() {
		return this.comments;
	}

	public void setComments(String comments) {
		this.comments = comments;
	}

	@Column(name = "contact_email", nullable = false)
	public String getContactEmail() {
		return this.contactEmail;
	}

	public void setContactEmail(String contactEmail) {
		this.contactEmail = contactEmail;
	}

	@Column(name = "contact_name", nullable = false, length = 100)
	public String getContactName() {
		return this.contactName;
	}

	public void setContactName(String contactName) {
		this.contactName = contactName;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created", length = 29)
	public Date getCreated() {
		return this.created;
	}

	public void setCreated(Date created) {
		this.created = created;
	}

	@Column(name = "is_active")
	public Boolean getIsActive() {
		return this.isActive;
	}

	public void setIsActive(Boolean isActive) {
		this.isActive = isActive;
	}

	@Column(name = "username", nullable = false)
	public String getUsername() {
		return this.username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	@Column(name = "password", nullable = false)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "allocator")
	public Set<Registrant> getRegistrants() {
		return this.registrants;
	}

	public void setRegistrants(Set<Registrant> registrants) {
		this.registrants = registrants;
	}

	public static void main(String [] args){
		EntityManagerFactory emf = Persistence.createEntityManagerFactory("org.hibernate.igsn.jpa");
		EntityManager em = emf.createEntityManager();
		em.getTransaction().begin();
		
		Users u = new Users("wtf2", "wtf",
			"wtf","wtf","wtf", "wtf",
			"wtf", "wtf", "wtf", "wtf",
			1234);
		em.persist(u);
        em.getTransaction().commit();
        em.close();
	}
}
